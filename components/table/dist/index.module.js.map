{
  "version": 3,
  "sources": ["../build/react-shim.mjs", "../../../themes/theme-1/dist/index.js", "../src/index.tsx", "../src/TableHeader.tsx", "../src/TableRow.tsx"],
  "sourcesContent": ["import { jsx } from '@emotion/react';\nexport { jsx };\n", "var __defProp = Object.defineProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/index.ts\n__export(exports, {\n  theme: () => theme\n});\nvar theme = {\n  colors: {\n    primary: \"#0aa\",\n    secondary: \"#fb7\",\n    danger: \"red\",\n    caution: \"orange\"\n  }\n};\n", "import { ThemeProvider } from '@emotion/react';\nimport { theme } from 'theme-1';\nimport { TableHeader } from './TableHeader';\nimport { TableRow } from './TableRow';\n\nexport interface TableData {\n  headers?: string[];\n  rows: string[][];\n}\n\ninterface TableProps {\n  data: TableData;\n}\n\nexport const Table = ({ data: { headers, rows } }: TableProps) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <table>\n        {!!headers?.length && (\n          <thead>\n            <tr>\n              {headers.map(header => (\n                <TableHeader key={header}>{header}</TableHeader>\n              ))}\n            </tr>\n          </thead>\n        )}\n        <tbody>\n          {rows.map(row => (\n            <TableRow key={row.join('')} row={row} />\n          ))}\n        </tbody>\n      </table>\n    </ThemeProvider>\n  );\n};\n", "import { css, Theme } from '@emotion/react';\n\ninterface TableHeaderProps {\n  children: React.ReactNode;\n}\n\nexport const TableHeader = ({ children }: TableHeaderProps) => {\n  return (\n    <th\n      css={(theme: Theme) => css`\n        color: ${theme.colors.secondary};\n      `}\n    >\n      {children}\n    </th>\n  );\n};\n", "interface TableRowProps {\n  row: string[];\n}\n\nexport const TableRow = ({ row }: TableRowProps) => {\n  return (\n    <tr>\n      {row.map(field => (\n        <td key={field}>{field}</td>\n      ))}\n    </tr>\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA,QAAI,aAAY,OAAO;AACvB,QAAI,kBAAiB,CAAC,WAAW,WAAU,QAAQ,cAAc,EAAE,OAAO;AAC1E,QAAI,WAAW,CAAC,QAAQ,QAAQ;AAC9B,sBAAe;AACf,eAAS,QAAQ;AACf,mBAAU,QAAQ,MAAM,EAAE,KAAK,IAAI,OAAO,YAAY;AAAA;AAI1D,aAAS,SAAS;AAAA,MAChB,OAAO,MAAM;AAAA;AAEf,QAAI,SAAQ;AAAA,MACV,QAAQ;AAAA,QACN,SAAS;AAAA,QACT,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,SAAS;AAAA;AAAA;AAAA;AAAA;;;ACjBb;AACA,qBAAsB;AADtB;;;ACAA;AAAA;AAMO,IAAM,cAAc,CAAC,EAAE,eAAiC;AAC7D,SACE,oBAAC,MAAD;AAAA,IACE,KAAK,CAAC,WAAiB;AAAA,iBACZ,OAAM,OAAO;AAAA;AAAA,KAGvB;AAAA;;;ACbP;AAIO,IAAM,WAAW,CAAC,EAAE,UAAyB;AAClD,SACE,oBAAC,MAAD,MACG,IAAI,IAAI,WACP,oBAAC,MAAD;AAAA,IAAI,KAAK;AAAA,KAAQ;AAAA;;;AFMlB,IAAM,QAAQ,CAAC,EAAE,MAAM,EAAE,SAAS,aAAyB;AAChE,SACE,oBAAC,eAAD;AAAA,IAAe,OAAO;AAAA,KACpB,oBAAC,SAAD,MACG,CAAC,CAAC,oCAAS,WACV,oBAAC,SAAD,MACE,oBAAC,MAAD,MACG,QAAQ,IAAI,YACX,oBAAC,aAAD;AAAA,IAAa,KAAK;AAAA,KAAS,YAKnC,oBAAC,SAAD,MACG,KAAK,IAAI,SACR,oBAAC,UAAD;AAAA,IAAU,KAAK,IAAI,KAAK;AAAA,IAAK;AAAA;AAAA;",
  "names": []
}
